Selected text: Best Practices for Scientific Computing, Wilson et. al

Comments & Questions
i)	In section 1 “Write  programs for people, not computers”, the authors state that the code style and formatting should 
be consistent giving an example where some variable names are following the CamelCaseNaming while others use 
pothole_case_naming fact that makes it more difficult (and longer) to read and readers make more mistakes. 

In our opinion, this can be true under some assumptions but a generalization can be unfair: some programs (and programmers) 
use a mix of formats depending on the type of the variable, for example to separate global variables from local ones, numerical 
from strings, arrays, etc., or mutable parameters from immutable ones, making it easier for both the reader and other researchers 
to follow the logic of the script. Therefore, we do not completely agree with the authors in this point, although we agree with the
other elements mentioned in the section.

Is there a best practice rule or preferred style for accounting situations like the stated ones?
Are there some differences depending on the chosen language?. 
Does the OS matter when using different formats/styles?

ii)	The main point of section 2 “Automate repetitive tasks” is one of the most important but somewhat forgotten practices among 
scientists from different areas. Based on our experience, a large number of researchers end up making repetitive tasks by themselves 
(manually) instead of relying on the computer to repeat them. Situations like “I already make the main code but I do not want to 
automate this step, because I want more control” are pretty common among some researchers, however, they are actually doing the
opposite: losing the complete control of the situation, adding potential errors and human mistakes.

On the other hand, we did not know about the existence of software like Make.
How do these software work?
Which are the most popular ones?
Are they being used in practice?
Can we mix different languages and call them?

iii)	The use of version control software is something that we believe is the most important tool when developing collaborative projects. 
Before taking the course, our classic “control” workflow was basically the use of some online (cloud) repository such as Dropbox, Google 
Drive and even a shared email for keeping all the relevant files, comments, log with the implemented changes of the current version, etc.
However, it was clearly not the best option: we had a lot of problems with duplicated files, out-of-date replacements, lost files, a mix 
of old functions/classes with new ones, leading us to lose time, commit a lot of mistakes and in the end, the team was completely 
frustrated. 

iv)	When the authors indicate that researcher should “use a variety of oracles”, we are not completely sure about what they are having 
in mind: 

What is an example of a pertinent oracle?
What happens if the researcher does not know what might be the “expected” output of the research? (like when using unsupervised machine
learning algorithms) 
Should we use known experiments as a comparison/starting point?

v)	Regarding the section “Optimize software only after it works correctly”, we do not completely agree with the authors, since 
depending on what your project/function/program aims, you should have a good idea about which language(s) is/are most 
suitable for that implementation, otherwise, depending on the “first language” you selected in order to have a 
“fast development” (like with a high-level language) the team could end up working maybe twice or more than the original 
estimated amount of hours allocated for that particular step, thus incurring in a series of costs in terms of time and monetary 
evaluation.

Therefore, we believe that, although it is a good practice/idea to get a prototype fast, it cannot be done without thinking in advance that
we might need to translate/modify the original code into a new language in order to obtain the performance needed by the project. 
For example, we think that is easier to translate a piece of python/java code into C than from R.  Hence, we do not agree with the 
sentence “write code in the highest-level language possible” mentioned by the authors: we should write the code in the language that 
is appropriate for the project and that the team feels comfortable to work with.

Is there some sort of a “guide of compatibility” or “easy-to-translate” document that summarizes the best practices for porting the code 
from one language to another?
Which languages are “good friends”? (easier to port/translate from one format to the other).
Are there formal studies/articles about this topic?. 
Is there a preferred language today in research or still depends on the project itself? 
Which languages are being used in large computer labs like Sandia, Nasa, etc.?

vi)	The pair programming collaborative strategy does not look like a useful approach in our opinion. Programmers usually have their own 
working style, say: code structure, working environment (including details such as the type of music they want to listen while coding), 
rhythm (e.g. when do they want to have a break), etc. Therefore, the practice seems very intrusive and poor, with a very high probability 
of being disruptive instead of productive. 

In our opinion, is far better to discuss the problem/function to be coded before starting coding such that all the members of the team who 
are actually involved in that piece of the project are “on the same page” and know exactly what they need to do, how they are going to 
tackle it and who is the responsible for what.  After every progress step, the team can have a brief meeting, sharing all the relevant 
aspects of the current version, current progress and the next goal/aims to reach in the next step.

Is this practice (pair programming) actually being used in companies/research teams?
How are the studies measuring the supposed “improvement in productivity” reached by the use of this practice?
Would you recommend to apply this under some particular context?
